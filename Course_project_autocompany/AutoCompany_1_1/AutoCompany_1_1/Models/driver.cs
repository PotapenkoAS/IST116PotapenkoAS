//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoCompany_1_1.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class driver : User
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public driver()
        {
            this.driver_list = new HashSet<driver_list>();
            this.setupped_route = new HashSet<setupped_route>();
            this.setupped_route1 = new HashSet<setupped_route>();
            this.setupped_route2 = new HashSet<setupped_route>();
        }

        public int idDriver { get; set; }

        public Nullable<int> experience { get; set; }
        public Nullable<int> salary { get; set; }
        public int idQualification { get; set; }
        public List<Shedule> Shedules { get; set; }

        public static driver Convert(User v)
        {
            var a = new driver();
            a.login = v.login;
            a.password = v.password;
            a.name = v.name;
            a.surname = v.surname;
            a.patronymic = v.patronymic;
            a.phoneNumber = v.phoneNumber;
            a.workerCode = v.workerCode;
            return a;
        }

        public List<Shedule> GetShedules()
        {
            using (AutoCompanyDBEntities ent = new AutoCompanyDBEntities())
            {
                List<setupped_route> sr = new List<setupped_route>();
                sr = ent.setupped_route
                    .Include("bus")
                    .Include("Route")
                    .Where(s => s.idFirstDriver == idDriver ||
                    s.idSecondDriver == idDriver ||
                    s.idConductor == idDriver).ToList();
                List<Shedule> sh = new List<Shedule>();
                foreach (setupped_route el in sr)
                {
                    sh.Add(new Shedule(el.bus, el.route, el.dateStart, el.dateEnd));
                }
                return sh;

            }
        }
        public virtual qualification qualification { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<driver_list> driver_list { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<setupped_route> setupped_route { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<setupped_route> setupped_route1 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<setupped_route> setupped_route2 { get; set; }
    }
}
